import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, CallbackContext, MessageHandler, filters, ApplicationBuilder, Updater, JobQueue, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import hashlib


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


# –í—ã–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.disable(logging.CRITICAL)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot_token = os.getenv('BOT_TOKEN')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
ASK_NAME, QUESTION1, QUESTION2, QUESTION3, GET_DATA, RESULT, GET_FIRST_ANSWER = range(7)

# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#WELCOME_PHOTO_PATH = 'C:/Users/narym/Chatbots/test/test/IMG_0969.jpg'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
WELCOME_PHOTO_PATH = os.getenv('WELCOME_PHOTO_PATH')

# –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤

images_zodiac = {
    "–û–≤–µ–Ω": {
        "image": os.getenv('OVEN')
    },
    "–¢–µ–ª–µ—Ü": {
        "image": os.getenv('TELEC')
    },
    "–ë–ª–∏–∑–Ω–µ—Ü—ã": {
        "image": os.getenv('BLIZNECU')
    },
    "–†–∞–∫": {
        "image": os.getenv('RAK')
    },
    "–õ–µ–≤": {
        "image": os.getenv('LEV')
    },
    "–î–µ–≤–∞": {
        "image": os.getenv('DEVA')
    },
    "–í–µ—Å—ã": {
        "image": os.getenv('VESU')
    },
    "–°–∫–æ—Ä–ø–∏–æ–Ω": {
        "image": os.getenv('SKORPION')
    },
    "–°—Ç—Ä–µ–ª–µ—Ü": {
        "image": os.getenv('STRELEC')
    },
    "–ö–æ–∑–µ—Ä–æ–≥": {
        "image": os.getenv('KOZEROG')
    },
    "–í–æ–¥–æ–ª–µ–π": {
        "image": os.getenv('VODOLEJ')
    },
    "–†—ã–±—ã": {
        "image": os.getenv('RUBU')
    },
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
def get_gspread_client():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(os.getenv('GOOGLE_CREDENTIALS_PATH'), scope)
    client = gspread.authorize(creds)
    return client

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API
def get_google_sheet(table_name, sheet_name):
    client = get_gspread_client()
    sheet1 = client.open(table_name).worksheet(sheet_name)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –ª–∏—Å—Ç–∞
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
    data = sheet1.get_all_records()
    return data

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
# –£–∫–∞–∂–∏—Ç–µ fileId –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
file_id = '1F4EqyvYcQIydytD-V4UjqDTp8BDbvvGBo6Ej3k4Da9E'
table_name = 'TextChatBot'  # –∏–º—è —Ç–∞–±–ª–∏—Ü—ã Google
sheet_name1 = 'Questions_Answers'  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
sheet_name2 = 'Results'

data1 = get_google_sheet(table_name, sheet_name1)
data2 = get_google_sheet(table_name, sheet_name2)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–æ–ø—Ä–æ—Å—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
questions = [row['–í–æ–ø—Ä–æ—Å—ã'] for row in data1]
options = [row['–í–∞—Ä–∏–∞–Ω—Ç—ã'].split("|") for row in data1]
#results = {row['–†–µ–∑—É–ª—å—Ç–∞—Ç']: {'description': row['–û–ø–∏—Å–∞–Ω–∏–µ'], 'image': row['–ö–∞—Ä—Ç–∏–Ω–∫–∞']} for row in data}
results = {row['–†–µ–∑—É–ª—å—Ç–∞—Ç']: {'description': row['–û–ø–∏—Å–∞–Ω–∏–µ']} for row in data2}

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ images –≤ –º–∞—Å—Å–∏–≤ results
for key in results:
    if key in images_zodiac:
        results[key]['image'] = images_zodiac[key]['image']

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ö—ç—à–∞
def get_sheet_data_hash(table_name, sheet_name):
    data = get_google_sheet(table_name, sheet_name1)
    data_str = str(data)
    return hashlib.md5(data_str.encode()).hexdigest()

last_data_hash = None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def get_updated_data_by_hash():
    global last_data_hash
    current_hash = get_sheet_data_hash(table_name, sheet_name1)
    
    if last_data_hash != current_hash:
        last_data_hash = current_hash
        print("–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!")
        return True  # –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    else:
        print("–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
        return False  # –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å

async def get_updated_data():
    print("–§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    global questions, options, results

    questions = [row['–í–æ–ø—Ä–æ—Å—ã'] for row in get_google_sheet(table_name, sheet_name1)]
    options = [row['–í–∞—Ä–∏–∞–Ω—Ç—ã'].split("|") for row in get_google_sheet(table_name, sheet_name1)]
    descr = {row['–†–µ–∑—É–ª—å—Ç–∞—Ç']: {'description': row['–û–ø–∏—Å–∞–Ω–∏–µ']} for row in get_google_sheet(table_name, sheet_name2)}
    for key in results:
        if key in descr:
            results[key]['description'] = descr[key]['description']
    return questions, options, results

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_inline_keyboard(options, row_width=2):
    keyboard = []
    for i in range(0, len(options), row_width):
        keyboard.append([InlineKeyboardButton(option, callback_data=option) for option in options[i:i+row_width]])
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def start_keyboard():
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–Ω—Ç—è–±—Ä—å", callback_data="start_survey")]]
    return InlineKeyboardMarkup(keyboard)

# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
def write_to_google_sheets(user_data):
    client = get_gspread_client()
    sheet = client.open("ChatBotBD").worksheet("Forecast_sep")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –ª–∏—Å—Ç–∞

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
    row = [datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_data['username'], user_data['telegram_account'], user_data['id']] + user_data['answers'] + [user_data.get('addit_data', '')]
    sheet.append_row(row)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> int:
    with open(WELCOME_PHOTO_PATH, 'rb') as photo:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=photo,
            caption='<b>–ü–†–û–ì–ù–û–ó –Ω–∞ –°–ï–ù–¢–Ø–ë–†–¨ –¥–ª—è –≤–∞—à–µ–≥–æ –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê</b> üëáüèº\n\n–ù–∞—Å –æ–∂–∏–¥–∞–µ—Ç –º–µ—Å—è—Ü –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∑–∏—Ü–∏–∏. –°–µ–Ω—Ç—è–±—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω—ã–º, –æ—Å–æ–±–µ–Ω–Ω–æ, –µ—Å–ª–∏ –≤—ã –ø–æ–∑–∞–±–æ—Ç–∏–ª–∏—Å—å –æ–± —ç—Ç–æ–º –µ—â–µ –≤ –∏—é–ª–µ –∏ –≤ –∞–≤–≥—É—Å—Ç–µ.\n\n–£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≤–∞–º –ø—Ä–∏–Ω–µ—Å—ë—Ç <b>–°–ï–ù–¢–Ø–ë–†–¨</b> ‚ñ∂Ô∏è\n\n<b>+ –ü–æ–¥–∞—Ä–æ–∫</b> üíù\n\n‚úÖ <b>–û–ø—Ä–µ–¥–µ–ª—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –º–µ—Å—è—Ü–∞</b> —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –¥–ª—è –≤–∞—Å\n\n–£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –°–ï–ù–¢–Ø–ë–†–¨ üëáüèº',
            parse_mode='HTML',
            reply_markup=start_keyboard()
        )

    modify = get_updated_data_by_hash()
    print(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è: {modify}")

    if modify == True:
        await get_updated_data()

    return ASK_NAME

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
async def start_survey(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

    return ASK_NAME

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def ask_name(update: Update, context: CallbackContext) -> None:
    context.user_data['username'] = update.message.text
    context.user_data['telegram_account'] = update.message.from_user.username  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç Telegram
    context.user_data['id'] = update.message.from_user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º id Telegram
    await update.message.reply_text(
        questions[0],
        reply_markup=create_inline_keyboard(options[0], row_width=3),  # –ó–∞–¥–∞–µ–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        parse_mode='Markdown'
    )
    return QUESTION1



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
async def handle_question(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = context.user_data.setdefault('answers', [])
    answers.append(query.data)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞)
    current_state = len(answers) # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞)
    
    if current_state < len(questions):  # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö
        await query.message.reply_text(
            questions[current_state],
            reply_markup=create_inline_keyboard(options[current_state]),
            parse_mode='Markdown'
        )
        print(f"current_state: {current_state}")
        print(f"len(questions): {len(questions)}")
        return QUESTION1 + current_state
            
    elif current_state == len(questions) and query.data == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        if context.user_data['telegram_account'] is None:
             await query.message.reply_text(
                 '<b>–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å–∫—Ä—ã—Ç. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–æ—Ä, —Ç–æ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à <u>–∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ @ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</u>, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.</b>',
                 parse_mode='HTML'
             )
             return GET_FIRST_ANSWER
        else:
            await query.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:'
            )
        return GET_DATA

    else:
        first_answer = answers[0]
        result_description = results.get(first_answer, "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        
        if result_description:
            description = result_description['description']
            image_path = result_description['image']
        
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(image_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=photo,
                    caption=description,
                    parse_mode='Markdown'
                )
        else:
            await query.message.reply_text(result_description, parse_mode='Markdown')

        write_to_google_sheets(context.user_data)
        context.user_data['answers'] = []
        await query.message.reply_text('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –º–æ–µ–º—É <a href="https://t.me/astro_nataly_bonum">–¢–ì-–∫–∞–Ω–∞–ª—É</a> –∏ <a href="https://www.instagram.com/nataly_bonum?igsh=MWo5emFvczUwaHUyNQ==">–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º</a>, –≥–¥–µ —è –¥–µ–ª—é—Å—å –∞—Å—Ç—Ä–æ-—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏ –∏ —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é.\n–ê —Ç–∞–∫–∂–µ, –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–æ–∏–º <a href="https://astronbonum.tilda.ws">—Å–∞–π—Ç–æ–º</a>.\n\n‚ù§Ô∏è –ë—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å —Ç–∞–º!\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏!',
                                       parse_mode='HTML'
                                       )
        return ConversationHandler.END

async def get_first_answer(update: Update, context: CallbackContext) -> int:
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    user_answer = update.message.text
    context.user_data['telegram_account'] = user_answer  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ user_data
    
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: <b>–¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è</b>',
        parse_mode='HTML'
    )
    return GET_DATA

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async def get_addit_data(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    context.user_data['addit_data'] = user_input
    
    first_answer = context.user_data['answers'][0]
    result_description = results.get(first_answer, "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    
    if result_description:
        description = result_description['description']
        image_path = result_description['image']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(image_path, 'rb') as photo:
            await context.bot.send_photo(
                chat_id=update.message.chat_id,
                photo=photo,
                caption=description,
                parse_mode='Markdown'
            )
    else:
        await update.message.reply_text(result_description, parse_mode='Markdown')
    
    write_to_google_sheets(context.user_data)
    context.user_data['answers'] = []
    await update.message.reply_text('<i>–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ ‚ù§Ô∏è\n–ò –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é <b>–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï</b> —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Å–µ–Ω—Ç—è–±—Ä—è –ø–æ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ ‚òÄÔ∏è\n–ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º <b>—Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –°–í–û–ò –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã</b> –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥</i>\n\n–ê –ø–æ–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –º–æ–µ–º—É <a href="https://t.me/astro_nataly_bonum">–¢–ì-–∫–∞–Ω–∞–ª—É</a> –∏ <a href="https://www.instagram.com/nataly_bonum?igsh=MWo5emFvczUwaHUyNQ==">–ò–Ω—Å—Ç–∞–≥—Ä–∞–º–º</a>, –≥–¥–µ —è –¥–µ–ª—é—Å—å –∞—Å—Ç—Ä–æ-—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º–∏ –∏ —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é.\n–ê —Ç–∞–∫–∂–µ, –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º <a href="https://astronbonum.tilda.ws">—Å–∞–π—Ç–æ–º</a>.\n\n–î–æ —Å–≤—è–∑–∏!', 
                                    parse_mode='HTML'
                                    )
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –æ–ø—Ä–æ—Å–∞
async def cancel(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        '–û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.'
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: CallbackContext) -> None:
    logger.error(f'Update {update} caused error {context.error}')

async def send_ping(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data
    await context.bot.send_message(chat_id="504662108", text="Ping!")

def main() -> None:
    application = ApplicationBuilder().token(bot_token).build()

    # –ü–æ–ª—É—á–∞–µ–º JobQueue
    job_queue = application.job_queue

    if job_queue is None:
        print("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return

    job_queue.run_repeating(send_ping, interval=timedelta(minutes=60), first=timedelta(seconds=10), name="ping_job", data="chat_id")

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_survey, pattern='start_survey')],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            1: [CallbackQueryHandler(handle_question, pattern='^(–û–≤–µ–Ω|–¢–µ–ª–µ—Ü|–ë–ª–∏–∑–Ω–µ—Ü—ã|–†–∞–∫|–õ–µ–≤|–î–µ–≤–∞|–í–µ—Å—ã|–°–∫–æ—Ä–ø–∏–æ–Ω|–°—Ç—Ä–µ–ª–µ—Ü|–ö–æ–∑–µ—Ä–æ–≥|–í–æ–¥–æ–ª–µ–π|–†—ã–±—ã)$')],
            QUESTION1: [CallbackQueryHandler(handle_question, pattern='^(–û–≤–µ–Ω|–¢–µ–ª–µ—Ü|–ë–ª–∏–∑–Ω–µ—Ü—ã|–†–∞–∫|–õ–µ–≤|–î–µ–≤–∞|–í–µ—Å—ã|–°–∫–æ—Ä–ø–∏–æ–Ω|–°—Ç—Ä–µ–ª–µ—Ü|–ö–æ–∑–µ—Ä–æ–≥|–í–æ–¥–æ–ª–µ–π|–†—ã–±—ã)$')],
            QUESTION2: [CallbackQueryHandler(handle_question, pattern='^(–£–¥–∞—á–Ω–æ|–°–ª–æ–∂–Ω–æ)$')],
            QUESTION3: [CallbackQueryHandler(handle_question, pattern='^(–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ|–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ)$')],
            GET_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_addit_data)],
            GET_FIRST_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_first_answer)],
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")]
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, cancel))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_error_handler(error_handler)

    application.run_polling()
 
if __name__ == '__main__':
    main()
